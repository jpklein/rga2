<?php
/**
 * @file
 * Code for the Featured Content feature.
 */

include_once('featured_content.features.inc');

/**
 * Implements hook_block_info().
 */
function featured_content_block_info() {
  $blocks = array();

  $result = db_query('SELECT title, qid FROM {nodequeue_queue}');
  foreach ($result as $record) {
    $blocks['nodequeue_edit_' . $record->qid] = array(
      'info' => t('Nodequeue Edit: "@name" Form', array('@name' => $record->title)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function featured_content_block_view($delta = '') {
    $block = array();

    if (strpos($delta, 'nodequeue_edit_') === 0) {
      module_load_include('inc', 'nodequeue', 'includes/nodequeue.admin');
      if ($queue = nodequeue_load(intval(str_replace('nodequeue_edit_', '', $delta)))) {
        // Foregoes pre-processing required for entires with multiple subqueues.
        $subqueue = array_shift(nodequeue_load_subqueues_by_queue($queue->qid));
        $nodes = _nodequeue_dragdrop_get_nodes($queue, $subqueue);
        $block['content'] = drupal_get_form('featured_content_nodequeue_edit_form', $queue, $nodes, $subqueue);
      }
    }
    return $block;
}

/**
 * Implements hook_theme().
 */
function featured_content_theme() {
  return array(
    'featured_content_nodequeue_edit_form_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Form definition for nodequeue drag'n'drop form.
 */
function featured_content_nodequeue_edit_form($form, $form_state, $queue, $nodes, $subqueue) {
  $form = array('#tree' => TRUE);

  // Textfield for adding nodes to the queue.
  $form['add'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),
  );
  $form['add']['nid'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'nodequeue/autocomplete/' . $subqueue->sqid,
    '#maxlength' => 1024,
    '#default_value' => t('Enter the title of a node to add it to the queue'),
    '#attributes' => array('class' => array('subqueue-add-nid')),
  );
  $form['add']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add content'),
    '#submit' => array('nodequeue_arrange_subqueue_form_add_submit'),
  );

  // Prepare the main part of the form which will be themed as a table.
  $count = count($nodes);
  $form['nodes'] = array();
  $form['nodes']['#theme'] = 'featured_content_nodequeue_edit_form_table';

  // Theme function needs these.
  $form['nodes']['#queue']    = (array) $queue;
  $form['nodes']['#subqueue'] = (array) $subqueue;

  foreach ($nodes as $node) {
    $form['nodes'][$node->nid]['#node'] = (array) $node;

    $form['nodes'][$node->nid]['title'] = ($node->visible)
      ? array('#markup' => l($node->title, 'node/' . $node->nid))
      : array('#value' => t('Restricted node, NID: @nid', array('@nid' => $node->nid)));

    if (node_access('update', $node)) {
      $form['nodes'][$node->nid]['edit'] = array('#markup' => l(t('edit'), 'node/' . $node->nid . '/edit', array('attributes' => array('title' => t('Edit this node')))));
    }

    $attr = array(
      '#attributes' => array(
        'title' => t('Remove from queue'),
        'style' => 'display: none;',
        'class' => array('nodequeue-remove'),
        'id' => 'nodequeue-remove-' . $node->nid,
      ),
      'query' => nodequeue_get_query_string($node->nid, TRUE),
    );
    $form['nodes'][$node->nid]['remove'] = array('#markup' => l(t('remove'), 'nodequeue/' . $queue->qid . '/remove-node/' . $subqueue->sqid . '/' . $node->nid, $attr));

    $form['nodes'][$node->nid]['position'] = array(
      '#type' => 'position',
      '#delta' => $count,
      '#default_value' => $node->position,
      '#attributes' => array(
        'class' => array('node-position'),
      ),
    );
  }

  // Submit, reverse, shuffle, and clear actions.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Changes'),
    '#submit' => array('nodequeue_arrange_subqueue_form_submit'),
  );

  // Disable all buttons if the queue is empty.
  if ($count == 0) {
    $form['actions']['submit']['#disabled']  = TRUE;
  }

  return $form;
}

/**
 * Theme the subqueue overview as a sortable list.
 */
function theme_featured_content_nodequeue_edit_form_table($variables) {
  $output = '';

  // Get css to hide some of the help text if javascript is disabled.
  drupal_add_css(drupal_get_path('module', 'nodequeue') . '/nodequeue.css');

  $form = $variables['form'];
  $table_id = 'nodequeue-dragdrop-' . $form['#subqueue']['sqid'];
  $table_classes = array(
    'nodequeue-dragdrop',
    'nodequeue-dragdrop-qid-' . $form['#subqueue']['qid'],
    'nodequeue-dragdrop-sqid-' . $form['#subqueue']['sqid'],
    'nodequeue-dragdrop-reference-' . $form['#subqueue']['reference'],
  );
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'node-position');
  drupal_add_js(drupal_get_path('module', 'nodequeue') . '/nodequeue_dragdrop.js');

  $reverse[str_replace('-', '_', $table_id)] = (bool) $form['#queue']['reverse'];
  drupal_add_js(array('nodequeue' => array('reverse' => $reverse)), array('type' => 'setting', 'scope' => JS_DEFAULT));

  // Render form as table rows.
  $rows = array();
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['title'])) {
      $row = array();
      $row[] = drupal_render($form[$key]['title']);
      $row[] = drupal_render($form[$key]['position']);
      $row[] = (!empty($form[$key]['edit'])) ? drupal_render($form[$key]['edit']) : '&nbsp;';
      $row[] = drupal_render($form[$key]['remove']);

      $rows[] = array('data'  => $row, 'class' => array('draggable'));
    }
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No nodes in this queue.'), 'colspan' => 7));
  }

  // Render the main nodequeue table.
  $header = array(t('Title'), t('Position'), array('data' => t('Operations'), 'colspan' => 2));
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => $table_classes)));

  return $output;
}
