<?php

/**
 *
 * @file
 * Empty Page module
 * A simple empty page solution. Assists in creating empty menu callbacks, mostly used for pages that only consist of blocks.
 *
 */

define('EMPTY_PAGE_PERM_ADMIN_CALLBACKS', 'administer empty page callbacks');

/**
 * Implements hook_permission().
 */
function empty_page_permission() {
  $permissions = array(
    EMPTY_PAGE_PERM_ADMIN_CALLBACKS => array(
      'title' => 'Administer Empty Page callbacks',
      'description' => 'Perform management tasks for Empty Page callbacks.',
    ),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function empty_page_menu() {
  $items = array();

  $items['admin/structure/empty-page'] = array(
    'title' => 'Empty Page callbacks',
    'description' => 'Manage Empty Page menu callbacks.',
    'page callback' => 'empty_page_admin_overview',
    'access arguments' => array(EMPTY_PAGE_PERM_ADMIN_CALLBACKS),
    'file' => 'empty_page.admin.inc',
  );

  $items['admin/structure/empty-page/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/empty-page/add'] = array(
    'title' => 'Add Callback',
    'description' => 'Create an empty page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('empty_page_callback_edit_form'),
    'access arguments' => array(EMPTY_PAGE_PERM_ADMIN_CALLBACKS),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'empty_page.admin.inc',
    'weight' => 1,
  );

  $items['admin/structure/empty-page/%empty_page/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('empty_page_callback_edit_form', 3),
    'access arguments' => array(EMPTY_PAGE_PERM_ADMIN_CALLBACKS),
    'type' => MENU_CALLBACK,
    'file' => 'empty_page.admin.inc',
  );

  $items['admin/structure/empty-page/%empty_page/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('empty_page_callback_delete_form', 3),
    'access arguments' => array(EMPTY_PAGE_PERM_ADMIN_CALLBACKS),
    'type' => MENU_CALLBACK,
    'file' => 'empty_page.admin.inc',
  );

  // Create the dynamic callbacks.
  foreach (empty_page_get_callbacks() as $callback) {
    $items[$callback->path] = array(
      'title' => t($callback->page_title),
      'page callback' => 'empty_page_empty',
      'access callback' => TRUE,
      'type' => MENU_SUGGESTED_ITEM,
    );
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function empty_page_theme(&$existing, $type, $theme, $path) {
  $hooks = array();
  $hooks['empty_page_callbacks_manage_render'] = array(
    'file' => 'empty_page.admin.inc',
  );
  return $hooks;
}

/**
 * An Empty Page callback's empty content.
 *
 * @return string $output
 */
function empty_page_empty() {
  // Return a space so that an empty page can be used for 40x pages.
  return ' ';
}


/**
 *
 * API
 *
 */

/**
 * Determine if a machine name is in use.
 *
 * @return boolean $exists
 */
function empty_page_callback_exists($callback_id) {
  $exists = db_query_range('SELECT 1 FROM {empty_page} WHERE callback_id = :name', 0, 1, array(':name' => $callback_id))->fetchField();
  return $exists;
}

/**
 * Get all Empty Page callbacks.
 *
 * @return $callbacks
 */
function empty_page_get_callbacks() {
  ctools_include('export');
  $callbacks = ctools_export_load_object('empty_page');
  return $callbacks;
}

/**
 * Get an Empty Page callback.
 *
 * @param string $callback_id
 * @return object $callback
 */
function empty_page_get_callback($callback_id = NULL) {
  // TODO:: is there a way to autogenerate a new callback object with ctools?
  $fields = array('cid', 'path', 'page_title', 'data', 'changed', 'created');

  $callback = ($callback_id) ? empty_page_load($callback_id) : (object) array_map(create_function('', ''), array_flip($fields));

  return $callback;
}

/**
 * Implements hook_load() to get a callback.
 *
 * Has the added benefit of autoloading the referenced object when '%empty_page'
 * is used as a parameter in menu entries.  
 *
 * @param string $name
 * @return object $callback
 */
function empty_page_load($name) {
  ctools_include('export');
  $callback = ctools_export_load_object('empty_page', 'names', array($name));
  return is_array($callback) ? reset($callback) : FALSE;
}

/**
 * Save an Empty Page callback.
 *
 * @param object $callback
 * @return int $cid
 */
function empty_page_save_callback($callback) {
  $ret = FALSE;

  // Set changed timestamp of incoming record.
  $callback->changed = REQUEST_TIME;

  // Compare input to existing records.
  $exists = empty_page_load($callback->callback_id);
  if ($exists && empty($exists->in_code_only)) {
    // Overwrite existing record.
    $callback->created = $exists->created;
    $ret = drupal_write_record('empty_page', $callback, 'callback_id');
  }
  else {
    // Create new record.
    $callback->created = REQUEST_TIME;
    $ret = drupal_write_record('empty_page', $callback);
  }

  if ($ret) {
    empty_page_clear_menu_cache();
  }
  return $ret;
}

/**
 * Delete an Empty Page callback.
 *
 * @param string $callback_id
 * @return (sql result resource or FALSE)
 */
function empty_page_delete_callback($callback_id) {
  db_delete('empty_page')
    ->condition('callback_id', $callback_id)
    ->execute();

  empty_page_clear_menu_cache();
}

/**
 * Helper function for cleaning / rebuilding menu.
 */
function empty_page_clear_menu_cache() {
  // Rebuild menu.
  menu_rebuild();
}
